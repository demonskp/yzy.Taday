package yzy.today.Dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EVENT".
*/
public class EventDao extends AbstractDao<Event, Long> {

    public static final String TABLENAME = "EVENT";

    /**
     * Properties of entity Event.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Ids = new Property(0, long.class, "ids", true, "_id");
        public final static Property Id = new Property(1, long.class, "id", false, "ID");
        public final static Property Day = new Property(2, String.class, "day", false, "DAY");
        public final static Property Des = new Property(3, String.class, "des", false, "DES");
        public final static Property Lunar = new Property(4, String.class, "lunar", false, "LUNAR");
        public final static Property Month = new Property(5, String.class, "month", false, "MONTH");
        public final static Property Pic = new Property(6, String.class, "pic", false, "PIC");
        public final static Property Title = new Property(7, String.class, "title", false, "TITLE");
        public final static Property Year = new Property(8, String.class, "year", false, "YEAR");
    }


    public EventDao(DaoConfig config) {
        super(config);
    }
    
    public EventDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EVENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: ids
                "\"ID\" INTEGER NOT NULL ," + // 1: id
                "\"DAY\" TEXT," + // 2: day
                "\"DES\" TEXT," + // 3: des
                "\"LUNAR\" TEXT," + // 4: lunar
                "\"MONTH\" TEXT," + // 5: month
                "\"PIC\" TEXT," + // 6: pic
                "\"TITLE\" TEXT," + // 7: title
                "\"YEAR\" TEXT);"); // 8: year
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EVENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Event entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getIds());
        stmt.bindLong(2, entity.getId());
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(3, day);
        }
 
        String des = entity.getDes();
        if (des != null) {
            stmt.bindString(4, des);
        }
 
        String lunar = entity.getLunar();
        if (lunar != null) {
            stmt.bindString(5, lunar);
        }
 
        String month = entity.getMonth();
        if (month != null) {
            stmt.bindString(6, month);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(7, pic);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(8, title);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(9, year);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Event entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getIds());
        stmt.bindLong(2, entity.getId());
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(3, day);
        }
 
        String des = entity.getDes();
        if (des != null) {
            stmt.bindString(4, des);
        }
 
        String lunar = entity.getLunar();
        if (lunar != null) {
            stmt.bindString(5, lunar);
        }
 
        String month = entity.getMonth();
        if (month != null) {
            stmt.bindString(6, month);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(7, pic);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(8, title);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(9, year);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Event readEntity(Cursor cursor, int offset) {
        Event entity = new Event( //
            cursor.getLong(offset + 0), // ids
            cursor.getLong(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // day
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // des
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // lunar
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // month
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // pic
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // title
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // year
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Event entity, int offset) {
        entity.setIds(cursor.getLong(offset + 0));
        entity.setId(cursor.getLong(offset + 1));
        entity.setDay(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDes(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLunar(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMonth(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPic(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTitle(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setYear(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Event entity, long rowId) {
        entity.setIds(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Event entity) {
        if(entity != null) {
            return entity.getIds();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Event entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
